name: Databricks Bundle Deploy

on:
  push:
    branches:
      - dev # Development branch
      - test # Testing branch
      - prod # Production branch

jobs:
  deploy:
    runs-on: ubuntu-latest
    # This picks the environment based on the branch name
    environment: ${{ github.ref_name }} # This will set the environment to 'dev', 'test', or 'prod' based on the branch name

    steps:
      - name: Checkout code  # Checkout the code from the repository
        uses: actions/checkout@v4 # Checkout the code from the repository

      - name: Set Databricks bundle target based on branch # This step sets the target based on the branch name
        id: set-target # Set an ID for this step to use its output later
        run: |
          if [[ "${GITHUB_REF##*/}" == "dev" ]]; then 
            echo "target=dev" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF##*/}" == "test" ]]; then
            echo "target=test" >> $GITHUB_OUTPUT
          elif [[ "${GITHUB_REF##*/}" == "prod" ]]; then
            echo "target=prod" >> $GITHUB_OUTPUT
          else
            echo "Unknown branch, exiting."
            exit 1
          fi

      - name: Set up Databricks CLI # This step sets up the Databricks CLI
        uses: databricks/setup-cli@main # Use the official Databricks CLI setup action

      - name: Debug Branch Info # This step is for debugging purposes to print branch information
        run: |
          echo "github.ref: ${{ github.ref }}" 
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.head_ref: ${{ github.head_ref }}"
          echo ${{ steps.set-target.outputs.target }}
          echo ${{ secrets.DATABRICKS_HOST }}

      - name: Validate Bundle # This step validates the Databricks bundle before deploying
        env:
          # DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
          DATABRICKS_TENANT_ID: ${{ secrets.DATABRICKS_TENANT_ID }}
          DATABRICKS_AUTH_TYPE: oauth-m2m
        run: |
          databricks bundle validate --target ${{ steps.set-target.outputs.target }}

      - name: Deploy Bundle # This step deploys the Databricks bundle to the specified target
        env:
          # DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
          DATABRICKS_TENANT_ID: ${{ secrets.DATABRICKS_TENANT_ID }}
          DATABRICKS_AUTH_TYPE: oauth-m2m
        run: |
          databricks bundle deploy --target ${{ steps.set-target.outputs.target }}

      # # Optional: Run a Databricks workflow after deploy
      - name: Run Databricks workflow
        env:
          # DATABRICKS_TOKEN: ${{ secrets.DATABRICKS_TOKEN }}
          DATABRICKS_CLIENT_ID: ${{ secrets.DATABRICKS_CLIENT_ID }}
          DATABRICKS_CLIENT_SECRET: ${{ secrets.DATABRICKS_CLIENT_SECRET }}
          DATABRICKS_TENANT_ID: ${{ secrets.DATABRICKS_TENANT_ID }}
          DATABRICKS_AUTH_TYPE: oauth-m2m
        run: |
          # databricks bundle run job_hls_genomics --target ${{ steps.set-target.outputs.target }} --refresh-all
          databricks bundle run aibi_dashboard --target ${{ steps.set-target.outputs.target }} --refresh-all # Refresh dashboards after deployment