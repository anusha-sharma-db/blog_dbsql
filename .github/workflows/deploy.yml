on:
  push:
    branches:
      - dev
      - test
      - prod

jobs:
  deploy:
    runs-on: ubuntu-latest
    env:
      DATABRICKS_OAUTH_CLIENT_ID: ${{ secrets.DATABRICKS_OAUTH_CLIENT_ID }}
      DATABRICKS_OAUTH_CLIENT_SECRET: ${{ secrets.DATABRICKS_OAUTH_CLIENT_SECRET }}
      # DATABRICKS_OAUTH_TENANT_ID: ${{ secrets.DATABRICKS_OAUTH_TENANT_ID }}
      DATABRICKS_HOST: $DATABRICKS_HOST
      DATABRICKS_AUTH_TYPE: "oauth-m2m"
    
    steps:
      - name: Checkout Code
        uses: actions/checkout@v3
        
      - name: Set up Databricks CLI
        uses: databricks/setup-cli@main
       
      - name: Set Environment
        # In GitHub Actions, github.ref is a built-in context variable that refers to the Git reference (branch, tag, or pull request) that triggered the workflow.
        run: |
          if [[ "${{ github.ref }}" == "refs/heads/dev" ]]; then 
            echo "DATABRICKS_BUNDLE_TARGET=dev" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/test" ]]; then
            echo "DATABRICKS_BUNDLE_TARGET=test" >> $GITHUB_ENV
          elif [[ "${{ github.ref }}" == "refs/heads/prod" ]]; then
            echo "DATABRICKS_BUNDLE_TARGET=prod" >> $GITHUB_ENV
          fi

      - name: Debug Branch Info
        run: |
          echo "github.ref: ${{ github.ref }}"
          echo "github.ref_name: ${{ github.ref_name }}"
          echo "github.head_ref: ${{ github.head_ref }}"
          echo ${{ vars.DATABRICKS_HOST }}
          echo $DATABRICKS_HOST

      # - name: Authenticate with Databricks using SPN OAuth
      #   run: |
      #     databricks auth login \
      #       --client-id $DATABRICKS_OAUTH_CLIENT_ID \
      #       --client-secret $DATABRICKS_OAUTH_CLIENT_SECRET \
      #       --tenant-id $DATABRICKS_OAUTH_TENANT_ID \
      #       --host $DATABRICKS_HOST \
      #       --auth-type oauth-m2m

      - name: Deploy and Run Bundle
        run: |
          # cd path/to/databricks/bundle
          # Deploy the bundle
          databricks bundle deploy --target "$DATABRICKS_BUNDLE_TARGET"
          # Run the workflow (update name accordingly)
          databricks bundle run your-workflow-name --target "$DATABRICKS_BUNDLE_TARGET" --refresh-all 2>&1 | tee output.log
          # Run the dashboard refresh (update name accordingly)
          databricks bundle run refresh_dashboard_job --target "$DATABRICKS_BUNDLE_TARGET" --refresh-all 2>&1 | tee output.log
